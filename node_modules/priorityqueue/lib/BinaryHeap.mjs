var p = Object.defineProperty;
var f = (o, e, t) => e in o ? p(o, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[e] = t;
var n = (o, e, t) => (f(o, typeof e != "symbol" ? e + "" : e, t), t);
import { B as g, d as u } from "./comparator.9bec0307.mjs";
function m(o, e, t) {
  const r = e * 2, i = e * 2 + 1;
  let l = e;
  return r < o.length && t(o[l], o[r]) < 0 && (l = r), i < o.length && t(o[l], o[i]) < 0 && (l = i), l;
}
function s(o, e, t) {
  const r = m(o, e, t);
  if (r !== e) {
    const i = o[e];
    o[e] = o[r], o[r] = i, s(o, r, t);
  }
}
function a(o) {
  for (let e = Math.floor(o.collection.length / 2) - 1; e >= 0; --e)
    s(o.collection, e, o.comparator);
}
class c extends g {
  constructor({ comparator: t = u } = {}) {
    super("BinaryHeap");
    n(this, "comparator");
    n(this, "collection", []);
    this.comparator = t;
  }
  static from(t, r = {}) {
    const i = new c(r);
    return i.collection = Array.from(t), a(i), i;
  }
  clear() {
    this.collection.length = 0;
  }
  toArray() {
    return [...this.collection].sort(this.comparator);
  }
  get length() {
    return this.collection.length;
  }
  top() {
    if (this.length === 0)
      throw new Error("invalid operation: top() called for empty BinaryHeap");
    return this.collection[0];
  }
  pop() {
    if (this.length === 0)
      throw new Error("invalid operation: pop() called for empty BinaryHeap");
    const t = this.collection[0];
    return this.collection.length > 1 ? (this.collection[0] = this.collection.pop(), s(this.collection, 0, this.comparator)) : this.collection.pop(), t;
  }
  push(t) {
    this.collection.push(t);
    const r = this.collection;
    for (let i = r.length - 1, l = Math.floor(i / 2); i > 0 && this.comparator(r[l], r[i]) < 0; i = l, l = Math.floor(l / 2)) {
      const h = r[i];
      r[i] = r[l], r[l] = h;
    }
  }
  merge(t) {
    t instanceof c ? this.collection = this.collection.concat(t.collection) : this.collection = this.collection.concat(t.toArray()), a(this), t.clear();
  }
  isEmpty() {
    return !this.collection.length;
  }
}
export {
  c as default
};
//# sourceMappingURL=BinaryHeap.mjs.map
