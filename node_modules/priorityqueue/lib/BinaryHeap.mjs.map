{"version":3,"file":"BinaryHeap.mjs","sources":["../src/BinaryHeap.ts"],"sourcesContent":["import { BasePriorityQueue } from \"./PriorityQueue\";\nimport type {\n  PriorityQueueInstance,\n  PriorityQueueOption,\n  PriorityQueueStatic,\n} from \"./PriorityQueue\";\n\nimport type { Comparator } from \"./comparator\";\nimport { defaultComparator } from \"./comparator\";\n\nfunction getLargestIndex<T>(\n  collection: T[],\n  index: number,\n  comparator: Comparator<T>\n): number {\n  const leftIndex = index * 2;\n  const rightIndex = index * 2 + 1;\n  let largestIndex = index;\n\n  if (\n    leftIndex < collection.length &&\n    comparator(collection[largestIndex], collection[leftIndex]) < 0\n  )\n    largestIndex = leftIndex;\n  if (\n    rightIndex < collection.length &&\n    comparator(collection[largestIndex], collection[rightIndex]) < 0\n  )\n    largestIndex = rightIndex;\n\n  return largestIndex;\n}\n\nfunction heapify<T>(\n  collection: T[],\n  index: number,\n  comparator: Comparator<T>\n): void {\n  const largestIndex = getLargestIndex(collection, index, comparator);\n\n  if (largestIndex !== index) {\n    // swap current & largest\n    const t = collection[index];\n    collection[index] = collection[largestIndex];\n    collection[largestIndex] = t;\n    heapify(collection, largestIndex, comparator);\n  }\n}\n\nfunction heapifyAll<T>(instance: BinaryHeap<T>): void {\n  for (let i = Math.floor(instance.collection.length / 2) - 1; i >= 0; --i) {\n    heapify(instance.collection, i, instance.comparator);\n  }\n}\n\n/**\n * An implementation of Binary Heap.\n */\nexport default class BinaryHeap<T>\n  extends BasePriorityQueue\n  implements PriorityQueueInstance<T>\n{\n  comparator: Comparator<T>;\n  collection: T[] = [];\n\n  static from<U>(\n    array: U[],\n    option: PriorityQueueOption<U> = {}\n  ): BinaryHeap<U> {\n    const instance = new BinaryHeap(option);\n    instance.collection = Array.from(array);\n    heapifyAll(instance);\n    return instance;\n  }\n\n  constructor({ comparator = defaultComparator }: PriorityQueueOption<T> = {}) {\n    super(\"BinaryHeap\");\n    this.comparator = comparator;\n  }\n\n  clear(): void {\n    this.collection.length = 0;\n  }\n\n  toArray(): T[] {\n    return [...this.collection].sort(this.comparator);\n  }\n\n  get length(): number {\n    return this.collection.length;\n  }\n\n  top(): T {\n    if (this.length === 0) {\n      throw new Error(\"invalid operation: top() called for empty BinaryHeap\");\n    }\n    return this.collection[0];\n  }\n\n  pop(): T {\n    if (this.length === 0) {\n      throw new Error(\"invalid operation: pop() called for empty BinaryHeap\");\n    }\n    const ret = this.collection[0];\n    if (this.collection.length > 1) {\n      this.collection[0] = this.collection.pop()!;\n      heapify(this.collection, 0, this.comparator);\n    } else {\n      this.collection.pop();\n    }\n\n    return ret;\n  }\n\n  push(value: T): void {\n    this.collection.push(value);\n    const arr = this.collection;\n\n    for (\n      let i = arr.length - 1, parent = Math.floor(i / 2);\n      i > 0 && this.comparator(arr[parent], arr[i]) < 0;\n      i = parent, parent = Math.floor(parent / 2)\n    ) {\n      const t = arr[i];\n      arr[i] = arr[parent];\n      arr[parent] = t;\n    }\n  }\n\n  merge<Instance extends PriorityQueueInstance<T>>(other: Instance): void {\n    if (other instanceof BinaryHeap) {\n      this.collection = this.collection.concat(other.collection);\n    } else {\n      this.collection = this.collection.concat(other.toArray());\n    }\n    heapifyAll(this);\n    other.clear();\n  }\n\n  isEmpty(): boolean {\n    return !this.collection.length;\n  }\n}\n\nconst check: PriorityQueueStatic = BinaryHeap;\nif (check === BinaryHeap) {\n  // noop\n}\n"],"names":["getLargestIndex","collection","index","comparator","leftIndex","rightIndex","largestIndex","heapify","t","heapifyAll","instance","i","BinaryHeap","BasePriorityQueue","defaultComparator","__publicField","array","option","ret","value","arr","parent","other"],"mappings":";;;;AAUA,SAASA,EACPC,GACAC,GACAC,GACQ;AACR,QAAMC,IAAYF,IAAQ,GACpBG,IAAaH,IAAQ,IAAI;AAC/B,MAAII,IAAeJ;AAGjB,SAAAE,IAAYH,EAAW,UACvBE,EAAWF,EAAWK,IAAeL,EAAWG,EAAU,IAAI,MAE/CE,IAAAF,IAEfC,IAAaJ,EAAW,UACxBE,EAAWF,EAAWK,IAAeL,EAAWI,EAAW,IAAI,MAEhDC,IAAAD,IAEVC;AACT;AAEA,SAASC,EACPN,GACAC,GACAC,GACM;AACN,QAAMG,IAAeN,EAAgBC,GAAYC,GAAOC,CAAU;AAElE,MAAIG,MAAiBJ,GAAO;AAE1B,UAAMM,IAAIP,EAAWC;AACrB,IAAAD,EAAWC,KAASD,EAAWK,IAC/BL,EAAWK,KAAgBE,GACnBD,EAAAN,GAAYK,GAAcH,CAAU;AAAA,EAC9C;AACF;AAEA,SAASM,EAAcC,GAA+B;AACpD,WAASC,IAAI,KAAK,MAAMD,EAAS,WAAW,SAAS,CAAC,IAAI,GAAGC,KAAK,GAAG,EAAEA;AACrE,IAAAJ,EAAQG,EAAS,YAAYC,GAAGD,EAAS,UAAU;AAEvD;AAKA,MAAqBE,UACXC,EAEV;AAAA,EAcE,YAAY,EAAE,YAAAV,IAAaW,EAAkB,IAA4B,CAAA,GAAI;AAC3E,UAAM,YAAY;AAdpB,IAAAC,EAAA;AACA,IAAAA,EAAA,oBAAkB,CAAA;AAchB,SAAK,aAAaZ;AAAA,EACpB;AAAA,EAbA,OAAO,KACLa,GACAC,IAAiC,IAClB;AACT,UAAAP,IAAW,IAAIE,EAAWK,CAAM;AAC7B,WAAAP,EAAA,aAAa,MAAM,KAAKM,CAAK,GACtCP,EAAWC,CAAQ,GACZA;AAAA,EACT;AAAA,EAOA,QAAc;AACZ,SAAK,WAAW,SAAS;AAAA,EAC3B;AAAA,EAEA,UAAe;AACb,WAAO,CAAC,GAAG,KAAK,UAAU,EAAE,KAAK,KAAK,UAAU;AAAA,EAClD;AAAA,EAEA,IAAI,SAAiB;AACnB,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EAEA,MAAS;AACH,QAAA,KAAK,WAAW;AACZ,YAAA,IAAI,MAAM,sDAAsD;AAExE,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EAEA,MAAS;AACH,QAAA,KAAK,WAAW;AACZ,YAAA,IAAI,MAAM,sDAAsD;AAElE,UAAAQ,IAAM,KAAK,WAAW;AACxB,WAAA,KAAK,WAAW,SAAS,KAC3B,KAAK,WAAW,KAAK,KAAK,WAAW,OACrCX,EAAQ,KAAK,YAAY,GAAG,KAAK,UAAU,KAE3C,KAAK,WAAW,OAGXW;AAAA,EACT;AAAA,EAEA,KAAKC,GAAgB;AACd,SAAA,WAAW,KAAKA,CAAK;AAC1B,UAAMC,IAAM,KAAK;AAGX,aAAA,IAAIA,EAAI,SAAS,GAAGC,IAAS,KAAK,MAAM,IAAI,CAAC,GACjD,IAAI,KAAK,KAAK,WAAWD,EAAIC,IAASD,EAAI,EAAE,IAAI,GAChD,IAAIC,GAAQA,IAAS,KAAK,MAAMA,IAAS,CAAC,GAC1C;AACA,YAAMb,IAAIY,EAAI;AACd,MAAAA,EAAI,KAAKA,EAAIC,IACbD,EAAIC,KAAUb;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,MAAiDc,GAAuB;AACtE,IAAIA,aAAiBV,IACnB,KAAK,aAAa,KAAK,WAAW,OAAOU,EAAM,UAAU,IAEzD,KAAK,aAAa,KAAK,WAAW,OAAOA,EAAM,SAAS,GAE1Db,EAAW,IAAI,GACfa,EAAM,MAAM;AAAA,EACd;AAAA,EAEA,UAAmB;AACV,WAAA,CAAC,KAAK,WAAW;AAAA,EAC1B;AACF;"}