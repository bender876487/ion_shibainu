{"version":3,"file":"PairingHeap.js","sources":["../src/PairingHeap.ts"],"sourcesContent":["import type {\n  PriorityQueueInstance,\n  PriorityQueueOption,\n  PriorityQueueStatic,\n} from \"./PriorityQueue\";\nimport { BasePriorityQueue } from \"./PriorityQueue\";\n\nimport type { Comparator } from \"./comparator\";\nimport { defaultComparator } from \"./comparator\";\n\ntype Node<T> = {\n  value: T;\n  nextSibling: Node<T> | null;\n  firstChild: Node<T> | null;\n};\n\nfunction createNode<T>(value: T): Node<T> {\n  return {\n    value,\n    nextSibling: null,\n    firstChild: null,\n  };\n}\n\nfunction traverse<T>(node: Node<T> | null): T[] {\n  if (!node) return [];\n\n  return [\n    node.value,\n    ...traverse(node.firstChild),\n    ...traverse(node.nextSibling),\n  ];\n}\n\n/** mutate first argument */\nfunction mergeNode<T>(\n  a: Node<T> | null,\n  b: Node<T> | null,\n  comp: Comparator<T>\n): Node<T> | null {\n  if (!a || !b) return a || b;\n  if (comp(a.value, b.value) < 0) {\n    return mergeNode(b, a, comp);\n  }\n  b.nextSibling = a.firstChild;\n  a.firstChild = b;\n  return a;\n}\n\nfunction mergeChildren<T>(\n  firstChild: Node<T> | null,\n  comp: Comparator<T>\n): Node<T> | null {\n  let cursor = firstChild;\n  let lastSibling = null;\n  let first = null;\n  let second = null;\n\n  while (cursor) {\n    // isolate first node & move cursor\n    first = cursor;\n    cursor = first.nextSibling;\n    first.nextSibling = null;\n\n    // isolate second node & move cursor\n    second = cursor;\n    if (second) {\n      cursor = second.nextSibling;\n      second.nextSibling = null;\n    }\n\n    // merge first pair\n    first = mergeNode(first, second, comp);\n\n    // collect merged siblings in reversed order\n    first!.nextSibling = lastSibling; // first is clearly present\n    lastSibling = first;\n  }\n\n  let revCursor = null;\n  while (lastSibling) {\n    // move revCursor\n    revCursor = lastSibling;\n    lastSibling = revCursor.nextSibling;\n\n    // merge last pair\n    revCursor = mergeNode(revCursor, cursor, comp);\n    cursor = revCursor;\n  }\n  return cursor;\n}\n\nexport default class PairingHeap<T>\n  extends BasePriorityQueue\n  implements PriorityQueueInstance<T>\n{\n  comparator: Comparator<T>;\n  root: Node<T> | null = null;\n\n  _length = 0;\n\n  static from<U>(\n    array: U[],\n    option: PriorityQueueOption<U> = {}\n  ): PairingHeap<U> {\n    const instance = new PairingHeap(option);\n    for (let i = 0, l = array.length; i < l; ++i) {\n      instance.push(array[i]);\n    }\n    return instance;\n  }\n\n  constructor({ comparator = defaultComparator }: PriorityQueueOption<T> = {}) {\n    super(\"PairingHeap\");\n    this.comparator = comparator;\n  }\n\n  clear(): void {\n    this._length = 0;\n    this.root = null;\n  }\n\n  get length(): number {\n    return this._length;\n  }\n\n  push(val: T): void {\n    this.root = mergeNode(this.root, createNode(val), this.comparator);\n    this._length += 1;\n  }\n\n  top(): T {\n    if (!this.root) {\n      throw new Error(\"invalid operation: top() called for empty PairingHeap\");\n    }\n    return this.root.value;\n  }\n\n  pop(): T {\n    if (!this.root) {\n      throw new Error(\"invalid operation: pop() called for empty PairingHeap\");\n    }\n    const ret = this.root.value;\n    this.root = mergeChildren(this.root.firstChild, this.comparator);\n    this._length -= 1;\n    return ret;\n  }\n\n  merge<Instance extends PriorityQueueInstance<T>>(other: Instance): void {\n    if (other instanceof PairingHeap && this.comparator === other.comparator) {\n      this.root = mergeNode(this.root, other.root, this.comparator);\n      this._length += other.length;\n      other.clear();\n      return;\n    }\n    for (let i = 0, a = other.toArray(), l = a.length; i < l; ++i) {\n      this.push(a[i]);\n    }\n    other.clear();\n  }\n\n  toArray(): T[] {\n    return traverse(this.root).sort(this.comparator);\n  }\n\n  isEmpty(): boolean {\n    return !this.root;\n  }\n}\nconst check: PriorityQueueStatic = PairingHeap;\nif (check === PairingHeap) {\n  // noop\n}\n"],"names":["createNode","value","traverse","node","mergeNode","a","b","comp","mergeChildren","firstChild","cursor","lastSibling","first","second","revCursor","PairingHeap","BasePriorityQueue","comparator","defaultComparator","__publicField","array","option","instance","i","l","val","ret","other"],"mappings":"gUAgBA,SAASA,EAAcC,EAAmB,CACjC,MAAA,CACL,MAAAA,EACA,YAAa,KACb,WAAY,IAAA,CAEhB,CAEA,SAASC,EAAYC,EAA2B,CAC9C,OAAKA,EAEE,CACLA,EAAK,MACL,GAAGD,EAASC,EAAK,UAAU,EAC3B,GAAGD,EAASC,EAAK,WAAW,CAAA,EALZ,EAOpB,CAGA,SAASC,EACPC,EACAC,EACAC,EACgB,CACZ,MAAA,CAACF,GAAK,CAACC,EAAUD,GAAKC,EACtBC,EAAKF,EAAE,MAAOC,EAAE,KAAK,EAAI,EACpBF,EAAUE,EAAGD,EAAGE,CAAI,GAE7BD,EAAE,YAAcD,EAAE,WAClBA,EAAE,WAAaC,EACRD,EACT,CAEA,SAASG,EACPC,EACAF,EACgB,CAChB,IAAIG,EAASD,EACTE,EAAc,KACdC,EAAQ,KACRC,EAAS,KAEb,KAAOH,GAEGE,EAAAF,EACRA,EAASE,EAAM,YACfA,EAAM,YAAc,KAGXC,EAAAH,EACLG,IACFH,EAASG,EAAO,YAChBA,EAAO,YAAc,MAIfD,EAAAR,EAAUQ,EAAOC,EAAQN,CAAI,EAGrCK,EAAO,YAAcD,EACPA,EAAAC,EAGhB,IAAIE,EAAY,KAChB,KAAOH,GAEOG,EAAAH,EACZA,EAAcG,EAAU,YAGZA,EAAAV,EAAUU,EAAWJ,EAAQH,CAAI,EACpCG,EAAAI,EAEJ,OAAAJ,CACT,CAEA,MAAqBK,UACXC,EAAAA,iBAEV,CAiBE,YAAY,CAAEC,WAAAA,EAAaC,EAAkB,iBAAA,EAA4B,CAAA,EAAI,CAC3E,MAAM,aAAa,EAjBrBC,EAAA,mBACAA,EAAA,YAAuB,MAEvBA,EAAA,eAAU,GAeR,KAAK,WAAaF,CACpB,CAdA,OAAO,KACLG,EACAC,EAAiC,GACjB,CACV,MAAAC,EAAW,IAAIP,EAAYM,CAAM,EAC9B,QAAAE,EAAI,EAAGC,EAAIJ,EAAM,OAAQG,EAAIC,EAAG,EAAED,EAChCD,EAAA,KAAKF,EAAMG,EAAE,EAEjB,OAAAD,CACT,CAOA,OAAc,CACZ,KAAK,QAAU,EACf,KAAK,KAAO,IACd,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,OACd,CAEA,KAAKG,EAAc,CACZ,KAAA,KAAOrB,EAAU,KAAK,KAAMJ,EAAWyB,CAAG,EAAG,KAAK,UAAU,EACjE,KAAK,SAAW,CAClB,CAEA,KAAS,CACH,GAAA,CAAC,KAAK,KACF,MAAA,IAAI,MAAM,uDAAuD,EAEzE,OAAO,KAAK,KAAK,KACnB,CAEA,KAAS,CACH,GAAA,CAAC,KAAK,KACF,MAAA,IAAI,MAAM,uDAAuD,EAEnE,MAAAC,EAAM,KAAK,KAAK,MACtB,YAAK,KAAOlB,EAAc,KAAK,KAAK,WAAY,KAAK,UAAU,EAC/D,KAAK,SAAW,EACTkB,CACT,CAEA,MAAiDC,EAAuB,CACtE,GAAIA,aAAiBZ,GAAe,KAAK,aAAeY,EAAM,WAAY,CACxE,KAAK,KAAOvB,EAAU,KAAK,KAAMuB,EAAM,KAAM,KAAK,UAAU,EAC5D,KAAK,SAAWA,EAAM,OACtBA,EAAM,MAAM,EACZ,MACF,CACA,QAASJ,EAAI,EAAGlB,EAAIsB,EAAM,QAAQ,EAAG,EAAItB,EAAE,OAAQkB,EAAI,EAAG,EAAEA,EACrD,KAAA,KAAKlB,EAAEkB,EAAE,EAEhBI,EAAM,MAAM,CACd,CAEA,SAAe,CACb,OAAOzB,EAAS,KAAK,IAAI,EAAE,KAAK,KAAK,UAAU,CACjD,CAEA,SAAmB,CACjB,MAAO,CAAC,KAAK,IACf,CACF"}