{"version":3,"file":"comparator.21efe408.js","sources":["../src/PriorityQueue.ts","../src/comparator.ts"],"sourcesContent":["import type { Comparator } from \"./comparator\";\n\nexport class BasePriorityQueue {\n  _kind: string;\n  constructor(kind: string) {\n    this._kind = kind;\n  }\n}\n\n/**\n * Option structure of Priority Queue.\n */\nexport type PriorityQueueOption<T> = {\n  comparator?: Comparator<T>;\n};\n\n/**\n * Static interface of Priority Queue.\n */\nexport type PriorityQueueStatic = {\n  /**\n   * Build priority queue from given array.\n   */\n  from: <T>(\n    _array: T[],\n    _option?: PriorityQueueOption<T>\n  ) => PriorityQueueInstance<T>;\n\n  /**\n   * Constructor of Priority Queue, with the given 'comparator'.\n   * 'comparator' should be same as Array.prototype.sort's argument.\n   * Like this: (a, b) => (a == b ? 0 : (a < b ? -1 : 1));\n   * If not, default function will be passed by PriorityQueue entrypoint.\n   */\n  new <T>(option?: PriorityQueueOption<T>): PriorityQueueInstance<T>;\n};\n\n/**\n * Instance interface of Priority Queue.\n */\nexport type PriorityQueueInstance<T> = {\n  comparator: Comparator<T>;\n\n  /**\n   * Clear this priority queue.\n   */\n  clear: () => void;\n\n  /**\n   * Write out the priority queue content as an Array.\n   */\n  toArray: () => T[];\n\n  /**\n   * Returns size of the priority queue.\n   */\n  get length(): number;\n\n  /**\n   * Push the element to the priority queue and returns self.\n   */\n  push: (_value: T) => void;\n\n  /**\n   * Get the top element of the priority queue.\n   */\n  top: () => T;\n\n  /**\n   * Pop the top element of the priority queue.\n   */\n  pop: () => T;\n\n  /**\n   * Merge another priority queue into this.\n   */\n  merge: <Instance extends PriorityQueueInstance<T>>(_other: Instance) => void;\n\n  /**\n   * Returns the priority queue is empty or not.\n   */\n  isEmpty: () => boolean;\n};\n","/**\n * A signature definition of comparator.\n * This type has same to an argument of `Array#sort`.\n */\nexport type Comparator<T> = (a: T, b: T) => ComparatorResult;\n\n/**\n * A type of comparator's result.\n */\nexport type ComparatorResult = 1 | 0 | -1 | number;\n\nexport function numericGreaterFirst(a: number, b: number): ComparatorResult {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nexport function dictOrderGreaterFirst(\n  _a: unknown,\n  _b: unknown\n): ComparatorResult {\n  const a = (_a as any).toString();\n  const b = (_b as any).toString();\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nexport const defaultComparator = dictOrderGreaterFirst;\n"],"names":["BasePriorityQueue","kind","__publicField","dictOrderGreaterFirst","_a","_b","a","b","defaultComparator"],"mappings":"qLAEO,MAAMA,CAAkB,CAE7B,YAAYC,EAAc,CAD1BC,EAAA,cAEE,KAAK,MAAQD,CACf,CACF,CCQgB,SAAAE,EACdC,EACAC,EACkB,CACZ,MAAAC,EAAKF,EAAW,WAChBG,EAAKF,EAAW,WACtB,OAAOC,EAAIC,EAAI,EAAID,EAAIC,EAAI,GAAK,CAClC,CAEO,MAAMC,EAAoBL"}