{"version":3,"file":"BinaryHeap.js","sources":["../src/BinaryHeap.ts"],"sourcesContent":["import { BasePriorityQueue } from \"./PriorityQueue\";\nimport type {\n  PriorityQueueInstance,\n  PriorityQueueOption,\n  PriorityQueueStatic,\n} from \"./PriorityQueue\";\n\nimport type { Comparator } from \"./comparator\";\nimport { defaultComparator } from \"./comparator\";\n\nfunction getLargestIndex<T>(\n  collection: T[],\n  index: number,\n  comparator: Comparator<T>\n): number {\n  const leftIndex = index * 2;\n  const rightIndex = index * 2 + 1;\n  let largestIndex = index;\n\n  if (\n    leftIndex < collection.length &&\n    comparator(collection[largestIndex], collection[leftIndex]) < 0\n  )\n    largestIndex = leftIndex;\n  if (\n    rightIndex < collection.length &&\n    comparator(collection[largestIndex], collection[rightIndex]) < 0\n  )\n    largestIndex = rightIndex;\n\n  return largestIndex;\n}\n\nfunction heapify<T>(\n  collection: T[],\n  index: number,\n  comparator: Comparator<T>\n): void {\n  const largestIndex = getLargestIndex(collection, index, comparator);\n\n  if (largestIndex !== index) {\n    // swap current & largest\n    const t = collection[index];\n    collection[index] = collection[largestIndex];\n    collection[largestIndex] = t;\n    heapify(collection, largestIndex, comparator);\n  }\n}\n\nfunction heapifyAll<T>(instance: BinaryHeap<T>): void {\n  for (let i = Math.floor(instance.collection.length / 2) - 1; i >= 0; --i) {\n    heapify(instance.collection, i, instance.comparator);\n  }\n}\n\n/**\n * An implementation of Binary Heap.\n */\nexport default class BinaryHeap<T>\n  extends BasePriorityQueue\n  implements PriorityQueueInstance<T>\n{\n  comparator: Comparator<T>;\n  collection: T[] = [];\n\n  static from<U>(\n    array: U[],\n    option: PriorityQueueOption<U> = {}\n  ): BinaryHeap<U> {\n    const instance = new BinaryHeap(option);\n    instance.collection = Array.from(array);\n    heapifyAll(instance);\n    return instance;\n  }\n\n  constructor({ comparator = defaultComparator }: PriorityQueueOption<T> = {}) {\n    super(\"BinaryHeap\");\n    this.comparator = comparator;\n  }\n\n  clear(): void {\n    this.collection.length = 0;\n  }\n\n  toArray(): T[] {\n    return [...this.collection].sort(this.comparator);\n  }\n\n  get length(): number {\n    return this.collection.length;\n  }\n\n  top(): T {\n    if (this.length === 0) {\n      throw new Error(\"invalid operation: top() called for empty BinaryHeap\");\n    }\n    return this.collection[0];\n  }\n\n  pop(): T {\n    if (this.length === 0) {\n      throw new Error(\"invalid operation: pop() called for empty BinaryHeap\");\n    }\n    const ret = this.collection[0];\n    if (this.collection.length > 1) {\n      this.collection[0] = this.collection.pop()!;\n      heapify(this.collection, 0, this.comparator);\n    } else {\n      this.collection.pop();\n    }\n\n    return ret;\n  }\n\n  push(value: T): void {\n    this.collection.push(value);\n    const arr = this.collection;\n\n    for (\n      let i = arr.length - 1, parent = Math.floor(i / 2);\n      i > 0 && this.comparator(arr[parent], arr[i]) < 0;\n      i = parent, parent = Math.floor(parent / 2)\n    ) {\n      const t = arr[i];\n      arr[i] = arr[parent];\n      arr[parent] = t;\n    }\n  }\n\n  merge<Instance extends PriorityQueueInstance<T>>(other: Instance): void {\n    if (other instanceof BinaryHeap) {\n      this.collection = this.collection.concat(other.collection);\n    } else {\n      this.collection = this.collection.concat(other.toArray());\n    }\n    heapifyAll(this);\n    other.clear();\n  }\n\n  isEmpty(): boolean {\n    return !this.collection.length;\n  }\n}\n\nconst check: PriorityQueueStatic = BinaryHeap;\nif (check === BinaryHeap) {\n  // noop\n}\n"],"names":["getLargestIndex","collection","index","comparator","leftIndex","rightIndex","largestIndex","heapify","t","heapifyAll","instance","i","BinaryHeap","BasePriorityQueue","defaultComparator","__publicField","array","option","ret","value","arr","parent","other"],"mappings":"gUAUA,SAASA,EACPC,EACAC,EACAC,EACQ,CACR,MAAMC,EAAYF,EAAQ,EACpBG,EAAaH,EAAQ,EAAI,EAC/B,IAAII,EAAeJ,EAGjB,OAAAE,EAAYH,EAAW,QACvBE,EAAWF,EAAWK,GAAeL,EAAWG,EAAU,EAAI,IAE/CE,EAAAF,GAEfC,EAAaJ,EAAW,QACxBE,EAAWF,EAAWK,GAAeL,EAAWI,EAAW,EAAI,IAEhDC,EAAAD,GAEVC,CACT,CAEA,SAASC,EACPN,EACAC,EACAC,EACM,CACN,MAAMG,EAAeN,EAAgBC,EAAYC,EAAOC,CAAU,EAElE,GAAIG,IAAiBJ,EAAO,CAE1B,MAAMM,EAAIP,EAAWC,GACrBD,EAAWC,GAASD,EAAWK,GAC/BL,EAAWK,GAAgBE,EACnBD,EAAAN,EAAYK,EAAcH,CAAU,CAC9C,CACF,CAEA,SAASM,EAAcC,EAA+B,CACpD,QAASC,EAAI,KAAK,MAAMD,EAAS,WAAW,OAAS,CAAC,EAAI,EAAGC,GAAK,EAAG,EAAEA,EACrEJ,EAAQG,EAAS,WAAYC,EAAGD,EAAS,UAAU,CAEvD,CAKA,MAAqBE,UACXC,EAAAA,iBAEV,CAcE,YAAY,CAAEV,WAAAA,EAAaW,EAAkB,iBAAA,EAA4B,CAAA,EAAI,CAC3E,MAAM,YAAY,EAdpBC,EAAA,mBACAA,EAAA,kBAAkB,CAAA,GAchB,KAAK,WAAaZ,CACpB,CAbA,OAAO,KACLa,EACAC,EAAiC,GAClB,CACT,MAAAP,EAAW,IAAIE,EAAWK,CAAM,EAC7B,OAAAP,EAAA,WAAa,MAAM,KAAKM,CAAK,EACtCP,EAAWC,CAAQ,EACZA,CACT,CAOA,OAAc,CACZ,KAAK,WAAW,OAAS,CAC3B,CAEA,SAAe,CACb,MAAO,CAAC,GAAG,KAAK,UAAU,EAAE,KAAK,KAAK,UAAU,CAClD,CAEA,IAAI,QAAiB,CACnB,OAAO,KAAK,WAAW,MACzB,CAEA,KAAS,CACH,GAAA,KAAK,SAAW,EACZ,MAAA,IAAI,MAAM,sDAAsD,EAExE,OAAO,KAAK,WAAW,EACzB,CAEA,KAAS,CACH,GAAA,KAAK,SAAW,EACZ,MAAA,IAAI,MAAM,sDAAsD,EAElE,MAAAQ,EAAM,KAAK,WAAW,GACxB,OAAA,KAAK,WAAW,OAAS,GAC3B,KAAK,WAAW,GAAK,KAAK,WAAW,MACrCX,EAAQ,KAAK,WAAY,EAAG,KAAK,UAAU,GAE3C,KAAK,WAAW,MAGXW,CACT,CAEA,KAAKC,EAAgB,CACd,KAAA,WAAW,KAAKA,CAAK,EAC1B,MAAMC,EAAM,KAAK,WAGX,QAAAT,EAAIS,EAAI,OAAS,EAAGC,EAAS,KAAK,MAAMV,EAAI,CAAC,EACjDA,EAAI,GAAK,KAAK,WAAWS,EAAIC,GAASD,EAAIT,EAAE,EAAI,EAChDA,EAAIU,EAAQA,EAAS,KAAK,MAAMA,EAAS,CAAC,EAC1C,CACA,MAAMb,EAAIY,EAAIT,GACdS,EAAIT,GAAKS,EAAIC,GACbD,EAAIC,GAAUb,CAChB,CACF,CAEA,MAAiDc,EAAuB,CAClEA,aAAiBV,EACnB,KAAK,WAAa,KAAK,WAAW,OAAOU,EAAM,UAAU,EAEzD,KAAK,WAAa,KAAK,WAAW,OAAOA,EAAM,SAAS,EAE1Db,EAAW,IAAI,EACfa,EAAM,MAAM,CACd,CAEA,SAAmB,CACV,MAAA,CAAC,KAAK,WAAW,MAC1B,CACF"}