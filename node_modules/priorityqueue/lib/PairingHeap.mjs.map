{"version":3,"file":"PairingHeap.mjs","sources":["../src/PairingHeap.ts"],"sourcesContent":["import type {\n  PriorityQueueInstance,\n  PriorityQueueOption,\n  PriorityQueueStatic,\n} from \"./PriorityQueue\";\nimport { BasePriorityQueue } from \"./PriorityQueue\";\n\nimport type { Comparator } from \"./comparator\";\nimport { defaultComparator } from \"./comparator\";\n\ntype Node<T> = {\n  value: T;\n  nextSibling: Node<T> | null;\n  firstChild: Node<T> | null;\n};\n\nfunction createNode<T>(value: T): Node<T> {\n  return {\n    value,\n    nextSibling: null,\n    firstChild: null,\n  };\n}\n\nfunction traverse<T>(node: Node<T> | null): T[] {\n  if (!node) return [];\n\n  return [\n    node.value,\n    ...traverse(node.firstChild),\n    ...traverse(node.nextSibling),\n  ];\n}\n\n/** mutate first argument */\nfunction mergeNode<T>(\n  a: Node<T> | null,\n  b: Node<T> | null,\n  comp: Comparator<T>\n): Node<T> | null {\n  if (!a || !b) return a || b;\n  if (comp(a.value, b.value) < 0) {\n    return mergeNode(b, a, comp);\n  }\n  b.nextSibling = a.firstChild;\n  a.firstChild = b;\n  return a;\n}\n\nfunction mergeChildren<T>(\n  firstChild: Node<T> | null,\n  comp: Comparator<T>\n): Node<T> | null {\n  let cursor = firstChild;\n  let lastSibling = null;\n  let first = null;\n  let second = null;\n\n  while (cursor) {\n    // isolate first node & move cursor\n    first = cursor;\n    cursor = first.nextSibling;\n    first.nextSibling = null;\n\n    // isolate second node & move cursor\n    second = cursor;\n    if (second) {\n      cursor = second.nextSibling;\n      second.nextSibling = null;\n    }\n\n    // merge first pair\n    first = mergeNode(first, second, comp);\n\n    // collect merged siblings in reversed order\n    first!.nextSibling = lastSibling; // first is clearly present\n    lastSibling = first;\n  }\n\n  let revCursor = null;\n  while (lastSibling) {\n    // move revCursor\n    revCursor = lastSibling;\n    lastSibling = revCursor.nextSibling;\n\n    // merge last pair\n    revCursor = mergeNode(revCursor, cursor, comp);\n    cursor = revCursor;\n  }\n  return cursor;\n}\n\nexport default class PairingHeap<T>\n  extends BasePriorityQueue\n  implements PriorityQueueInstance<T>\n{\n  comparator: Comparator<T>;\n  root: Node<T> | null = null;\n\n  _length = 0;\n\n  static from<U>(\n    array: U[],\n    option: PriorityQueueOption<U> = {}\n  ): PairingHeap<U> {\n    const instance = new PairingHeap(option);\n    for (let i = 0, l = array.length; i < l; ++i) {\n      instance.push(array[i]);\n    }\n    return instance;\n  }\n\n  constructor({ comparator = defaultComparator }: PriorityQueueOption<T> = {}) {\n    super(\"PairingHeap\");\n    this.comparator = comparator;\n  }\n\n  clear(): void {\n    this._length = 0;\n    this.root = null;\n  }\n\n  get length(): number {\n    return this._length;\n  }\n\n  push(val: T): void {\n    this.root = mergeNode(this.root, createNode(val), this.comparator);\n    this._length += 1;\n  }\n\n  top(): T {\n    if (!this.root) {\n      throw new Error(\"invalid operation: top() called for empty PairingHeap\");\n    }\n    return this.root.value;\n  }\n\n  pop(): T {\n    if (!this.root) {\n      throw new Error(\"invalid operation: pop() called for empty PairingHeap\");\n    }\n    const ret = this.root.value;\n    this.root = mergeChildren(this.root.firstChild, this.comparator);\n    this._length -= 1;\n    return ret;\n  }\n\n  merge<Instance extends PriorityQueueInstance<T>>(other: Instance): void {\n    if (other instanceof PairingHeap && this.comparator === other.comparator) {\n      this.root = mergeNode(this.root, other.root, this.comparator);\n      this._length += other.length;\n      other.clear();\n      return;\n    }\n    for (let i = 0, a = other.toArray(), l = a.length; i < l; ++i) {\n      this.push(a[i]);\n    }\n    other.clear();\n  }\n\n  toArray(): T[] {\n    return traverse(this.root).sort(this.comparator);\n  }\n\n  isEmpty(): boolean {\n    return !this.root;\n  }\n}\nconst check: PriorityQueueStatic = PairingHeap;\nif (check === PairingHeap) {\n  // noop\n}\n"],"names":["createNode","value","traverse","node","mergeNode","a","b","comp","mergeChildren","firstChild","cursor","lastSibling","first","second","revCursor","PairingHeap","BasePriorityQueue","comparator","defaultComparator","__publicField","array","option","instance","i","l","val","ret","other"],"mappings":"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"}