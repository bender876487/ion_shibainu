import type { Comparator } from "./comparator";
import type { PriorityQueueInstance, PriorityQueueOption } from "./PriorityQueue";
import { BasePriorityQueue } from "./PriorityQueue";
declare type Node<T> = {
    value: T;
    left: Node<T> | null;
    right: Node<T> | null;
};
/**
 * An implementation of Skew Heap.
 */
export default class SkewHeap<T> extends BasePriorityQueue implements PriorityQueueInstance<T> {
    comparator: Comparator<T>;
    root: Node<T> | null;
    _length: number;
    static from<U>(array: U[], option?: PriorityQueueOption<U>): SkewHeap<U>;
    constructor({ comparator }?: PriorityQueueOption<T>);
    clear(): void;
    get length(): number;
    push(val: T): void;
    top(): T;
    pop(): T;
    merge<Instance extends PriorityQueueInstance<T>>(other: Instance): void;
    toArray(): T[];
    isEmpty(): boolean;
}
export {};
