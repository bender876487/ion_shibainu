import * as Koa from 'koa';
import * as Router from 'koa-router';
import * as getRawBody from 'raw-body';
import * as querystring from 'querystring';
import {  ISidetreeBitcoinConfig,  SidetreeBitcoinProcessor,  SidetreeBitcoinVersionModel} from '@decentralized-identity/sidetree';

/*
 file:///media/ubuntu/shareddir1/karametron/ion_001/ion/src/sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/bitcoin/IBitcoinConfig
*/ 


/*
 file:///media/ubuntu/shareddir1/karametron/ion_001/ion/src/sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/bitcoin/IBitcoinConfig
*/ 




//import {  ISidetreeBitcoinConfig,  SidetreeBitcoinProcessor,  SidetreeBitcoinVersionModel} from './sidetree-reference-impl/lib/index';




//import {  ISidetreeBitcoinConfig } from './sidetree-referenced-impl/lib/bitcoin/IBitcoinConfig';

//import   SidetreeBitcoinProcessor from './sidetree-referenced-impl/lib/index.js';


//import {  ISidetreeBitcoinConfig,  SidetreeBitcoinProcessor,  SidetreeBitcoinVersionModel} from './sidetree-referenced-impl/lib/index';

/*
import ISidetreeBitcoinConfig from "./sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/bitcoin/IBitcoinConfig";

import { SidetreeBitcoinProcessor } from "./sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/index";


import { SidetreeBitcoinVersionModel } from "./sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/index";
*/



//IBitcoinConfig.js

//import LogColor from '../bin/LogColor';


/*
/media/ubuntu/shareddir1/karametron/ion_001/ion/src/sidetree-referenced-impl-1.0.6-unstable.5e20ddf/dist/lib/bitcoin/IBitcoinConfig.js
*/

/** Shibainu service configuration parameters */
interface ICustomCoinServiceConfig extends ISidetreeBitcoinConfig {
  /** Boolean to control if error thrown by request handler is logged. */
  logRequestError?: boolean;
  /** Port number used by the service. */
  port: number;
}

/**
 * Handles the request using the given request handler then assigns the returned value as the body.
 * NOTE: The value of this method is really the unified handling of errors thrown.
 * @param requestHandler Request handler.
 * @param koaResponse Response object to update.
 */
async function handleRequestAndSetKoaResponse (requestHandler: () => Promise<any>, koaResponse: Koa.Response) {
  try {
    const responseBody = await requestHandler();
    koaResponse.status = 200;
    koaResponse.set('Content-Type', 'application/json');

    if (responseBody) {
      koaResponse.body = JSON.stringify(responseBody);
    } else {
      // Need to set the body explicitly, otherwise Koa will return HTTP 204
      koaResponse.body = '';
    }
  } catch (error) {
    if ('status' in error) {
      koaResponse.status = error.status;
    } else {
      // This is an unknown/unexpected error.
      koaResponse.status = 500;

      // Log error if the config flag is switched on.
      if (config.logRequestError) {
        console.error(error);
      }
    }

    if ('code' in error) {
      koaResponse.body = JSON.stringify({
        code: error.code
      });
    }
  }
}


console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check1 ok. \n\n`)

// Selecting configuration file, environment variable overrides default config file.
let configFilePath = '../config/testnet-shibainu-config.json';
if (process.env.SHIBAINU_CONFIG_FILE_PATH === undefined) {
  console.log((`[msg from ion/src/shibainu.ts]. msg10. Environment variable SHIBAINU_CONFIG_FILE_PATH undefined, using default path ${configFilePath} instead.\n\n`));
} else {
  configFilePath = process.env.SHIBAINU_CONFIG_FILE_PATH;
  console.log((`[msg from ion/src/shibainu.ts]. msg11. Loading configuration from ${(configFilePath)}...\n\n`));
}
const config: ICustomCoinServiceConfig = require(configFilePath);
console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check2 ok. \n\n`)

// see if there are overrides for the service endpoints with env vars
const bitcoinDataDirectoryEnv = process.env.SHIBAINU_DATA_DIR;
if (bitcoinDataDirectoryEnv !== undefined) {
  config.bitcoinDataDirectory = bitcoinDataDirectoryEnv;
}

const bitcoinRpcPasswordEnv = process.env.SHIBAINU_RPC_PASSWORD;
if (bitcoinRpcPasswordEnv !== undefined) {
  config.bitcoinRpcPassword = bitcoinRpcPasswordEnv;
}

const bitcoinWalletEnv = process.env.SHIBAINU_WALLET;
if (bitcoinWalletEnv !== undefined) {
  config.bitcoinWalletOrImportString = bitcoinWalletEnv;
}

const bitcoinEndpointEnv = process.env.SHIBAINU_ENDPOINT;
if (bitcoinEndpointEnv !== undefined) {
  config.bitcoinPeerUri = bitcoinEndpointEnv;
}

const mongoEndpointEnv = process.env.MONGO_ENDPOINT;
if (mongoEndpointEnv !== undefined) {
  config.mongoDbConnectionString = mongoEndpointEnv;
}



console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check3 ok. \n\n`)

// Selecting versioning file, environment variable overrides default config file.
let versioningConfigFilePath = '../config/testnet-shibainu-versioning.json';
if (process.env.ION_SHIBAINU_VERSIONING_CONFIG_FILE_PATH === undefined) {
  console.log('\n\n')
  console.log((
    `[msg from ion/src/shibainu.ts]. msg12. Environment variable ION_SHIBAINU_VERSIONING_CONFIG_FILE_PATH undefined, using default ION Shibainu versioning config path ${versioningConfigFilePath}.\n\n`
  ));
} else {
  versioningConfigFilePath = process.env.ION_SHIBAINU_VERSIONING_CONFIG_FILE_PATH;
  console.log((`[msg from ion/src/shibainu.ts]. msg13. Loading ION Shibainu versioning config from ${(versioningConfigFilePath)}...\n\n`));
}
const ionBitcoinVersions: SidetreeBitcoinVersionModel[] = require(versioningConfigFilePath);

console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check4 ok. \n\n`)



const app = new Koa();

// Raw body parser.
app.use(async (ctx, next) => {
  ctx.body = await getRawBody(ctx.req);
  await next();
});

const router = new Router();

router.get('/transactions', async (ctx, _next) => {
  const params = querystring.parse(ctx.querystring);

  let requestHandler;
  if ('since' in params && 'transaction-time-hash' in params) {
    const since = Number(params['since']);
    const transactionTimeHash = String(params['transaction-time-hash']);
    requestHandler = () => blockchainService.transactions(since, transactionTimeHash);
  } else {
    requestHandler = () => blockchainService.transactions();
  }

  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/version', async (ctx, _next) => {
  const requestHandler = () => blockchainService.getServiceVersion();
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/fee/:blockchainTime', async (ctx, _next) => {
  const requestHandler = () => blockchainService.getNormalizedFee(ctx.params.blockchainTime);
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.post('/transactions', async (ctx, _next) => {
  const writeRequest = JSON.parse(ctx.body);
  const requestHandler = () => blockchainService.writeTransaction(writeRequest.anchorString, writeRequest.minimumFee);
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.post('/transactions/firstValid', async (ctx, _next) => {
  const transactionsObject = JSON.parse(ctx.body);
  const requestHandler = () => blockchainService.firstValidTransaction(transactionsObject.transactions);
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/time', async (ctx, _next) => {
  const requestHandler = () => blockchainService.time();
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/time/:hash', async (ctx, _next) => {
  const requestHandler = () => blockchainService.time(ctx.params.hash);
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/locks/:identifier', async (ctx, _next) => {
  const requestHandler = () => blockchainService.getValueTimeLock(ctx.params.identifier);
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/writerlock', async (ctx, _next) => {
  const requestHandler = () => blockchainService.getActiveValueTimeLockForThisNode();
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

router.get('/monitors/balance', async (ctx, _next) => {
  const requestHandler = () => blockchainService.monitor.getWalletBalance();
  await handleRequestAndSetKoaResponse(requestHandler, ctx.response);
});

app.use(router.routes())
  .use(router.allowedMethods());

// Handler to return bad request for all unhandled paths.
app.use((ctx, _next) => {
  ctx.response.status = 400;
});

const port = process.env.SIDETREE_SHIBAINU_PORT || config.port;


console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check5 ok. \n\n`)


// initialize the blockchain service and kick-off background tasks
let server: any;
let blockchainService: SidetreeBitcoinProcessor;
try {
  blockchainService = new SidetreeBitcoinProcessor(config);

  // SIDETREE_TEST_MODE enables unit testing of this file by bypassing blockchain service initialization.
  if (process.env.SIDETREE_TEST_MODE === 'true') {
    server = app.listen(port);
  } else {
    blockchainService.initialize(ionBitcoinVersions)
      .then(() => {
        server = app.listen(port, () => {
          console.log('\n\n');
          console.log(`[msg from ion/src/shibainu.ts]. msg20. Sidetree-Shibainu node running on port: ${port}`);
        });
      })
      .catch((error) => {
        console.log('\n\n');
        console.error(`[msg from ion/src/shibainu.ts]. msg21. Sidetree-Shibainu node initialization failed with error: ${JSON.stringify(error, Object.getOwnPropertyNames(error))}`);
        
        
        blockchainService
        process.exit(1);
      });
  }
} catch (error) {
  console.log('\n\n');
  console.log('[msg from ion/src/shibainu.ts] catch error432');
  console.log('[msg from ion/src/shibainu.ts] msg54. ' + error.toString());
  
  //../config/testnet-shibainu-config.json
  //../config/testnet-shibainu-versioning.json
  console.log('\n\n');
  console.log('[msg from ion/src/shibainu.ts] msg55. ' + 'Is bitcoinWalletOrImportString  valid? Consider using testnet key generated below:');
  console.log('[msg from ion/src/shibainu.ts]. msg56. ' + SidetreeBitcoinProcessor.generatePrivateKeyForTestnet()); 
  
  console.log('\n\n');
  
  console.log('[msg from ion/src/shibainu.ts] msg57. ');
  console.log('Check bitcoinWalletOrImportString  in [config/testnet-shibainu-config.json]');
  console.log('[DEV]. Check bitcoinWalletOrImportString  in [sidetree-reference-impl/lib/bitcoin/IBitcoinConfig.ts]');  
  console.log('[DEV]. Check IBitcoinConfig in [sidetree-reference-impl/lib/index.ts]');  
  console.log('[DEV]. Check IBitcoinConfig in [sidetree-reference-impl/lib/index.ts]');  

  console.log('\n\n');
  console.log('process.exit');  
  console.log('\n\n');
  
  process.exit(1);
}
console.info('[msg from ion/src/shibainu.ts]. msg57. '+ 'Sidetree Shibainu service configuration:');
// console.info(config);

console.log(`\n\n`)
console.log(`[msg from ion/src/shibainu.ts]. check6 ok. \n\n`)


export {
  server,
  blockchainService
};
